################################################################################
# A config file describing a SpiNNaker system.
################################################################################

# Configuration parameters controling the model to be simulated
model: {
	# Size of the torus (on the x and y axis)
	system_size: {
		width: 12;
		height: 12;
	}
	
	# Parameters for the router model in each node.
	router: {
		# Period at which the pipeline is advanced and packets can be accepted or
		# forwarded/dropped.
		period: 1;
		
		# Number of pipeline stages. If the pipeline is 1 stage, a packet can enter
		# (if the pipeline isn't stalled and full) in one period and is
		# forwarded/dropped (if possible) in the next.
		pipeline_length: 4;
		
		# Should emergency routing be attempted when packets time out?
		use_emergency_routing: False;
		
		# The timeout (in periods) before trying emergency routing. If emergency
		# routing is disabled or the packet is in the second leg of an emergency
		# route, this is the timeout before it is dropped.
		first_timeout: 10;
		
		# The timeout before a packet which has not yet started its emergency route
		# can wait (in periods) before it is dropped.
		final_timeout: 5;
	}
	
	# Nodes are connected together via buffers. These buffers model the output
	# buffering/desynchronisation that exists in SpiNNaker.
	node_to_node_buffers: {
		length: 4;
	}
	
	# Parameters for the tree of arbiters which merge the 7 incoming buffers of
	# packets into a single buffer that the router deals with.
	#
	# The arbiter tree looks like this (with the levels indicated below):
	#
	#        |\                                            *** KEY ***
	#     N--| |_,--,_
	#     S--| | '--' |    |\                                        |\
	#        |/       `----| |_,--,_                     Merger:  ---| |__
	#                 ,----| | '--' |                             ---| |
	#        |\       |    |/       |   |\                           |/
	#     E--| |_,--,_|             '---| |_,--,___
	#     W--| | '--'               ,---| | '--'         Buffer:  __,--,__
	#        |/            |\       |   |/                          '--'
	#                 ,----| |_,--,_|
	#        |\       | ,--| | '--'
	#    NE--| |_,--,_| |  |/
	#    SW--| | '--'   |
	#        |/         |
	#                   |
	#     L-------------'
	#
	#      `----v----'   `----v----'    `----v----'
	#         Lvl2           Lvl1           Root
	#
	# The period is the period of the merger (i.e. the number of ticks between
	# forwarding each incoming packet). The buffer_length is the length of the
	# buffer after each arbiter.
	arbiter_tree: {
		root: { period: 1; buffer_length: 1; }
		lvl1: { period: 2; buffer_length: 1; }
		lvl2: { period: 4; buffer_length: 1; }
	}
	
	# Each node contains a packet generator which at a regular period will
	# randomly drop a packet into the local input port of the node.
	packet_generator: {
		# How frequently to (possibly) drop a packet into the network
		period: 1;
		
		# The probability of dropping a packet into the network
		bernoulli_prob: 0.01;
		
		# The distribution of packet destinations. Valid settings are:
		#   "cyclic" -- Cycle through all nodes in the system starting with the
		#               current node
		#   "unform" -- Pick destinations at random using a uniform distribution.
		dist: "cyclic";
	}
	
	# Each node contains a packet consumer which will accept packets at a given
	# interval and with a given probability.
	packet_consumer: {
		# How frequently should a packet (possibly) be accepted?
		period: 1;
		
		# With what probability will a waiting packet be accepted
		bernoulli_prob: 1.00;
		
		# How long should the buffer be that connects the router to the packet
		# consumer.
		buffer_length: 2;
	}
}


# Configuration parameters controlling the simulation and data collection
simulation: {
	# The number of ticks the simulation should run before terminating
	duration: 200000000;
}

