################################################################################
# A config file describing a SpiNNaker system.
################################################################################

# Configuration parameters controling the model to be simulated
model: {
	# Size of the torus (on the x and y axis)
	system_size: {
		width: 12;
		height: 12;
	}
	
	# Parameters for the router model in each node.
	router: {
		# Period at which the pipeline is advanced and packets can be accepted or
		# forwarded/dropped.
		period: 1;
		
		# Number of pipeline stages. If the pipeline is 1 stage, a packet can enter
		# (if the pipeline isn't stalled and full) in one period and is
		# forwarded/dropped (if possible) in the next.
		pipeline_length: 7;
		
		# Should emergency routing be attempted when packets time out?
		use_emergency_routing: False;
		
		# The timeout (in periods) before trying emergency routing. If emergency
		# routing is disabled or the packet is in the second leg of an emergency
		# route, this is the timeout before it is dropped.
		first_timeout: 100;
		
		# The timeout before a packet which has not yet started its emergency route
		# can wait (in periods) before it is dropped.
		final_timeout: 50;
	}
	
	# The connections between nodes consting of a buffer and delay link. Two of
	# these are used per direction for full duplex communication. The buffers
	# model the output buffering/desynchronisation that exists in SpiNNaker. The
	# delay links model the request/acknowedge chip-to-chip delays.
	#
	# Actually implemented as:
	#
	#    ,---------------,   ,-------,   ,--------------,
	# -->| Output Buffer |-->| Delay |-->| Input Buffer |-->
	#    '---------------'   '-------'   '--------------'
	node_to_node_links: {
		# The length of the two buffers.
		output_buffer_length: 2;
		input_buffer_length: 2;
		
		# Number of cycles each packet takes to progress from the first buffer to
		# the second. If a simulator tick is one router cycle @ 200MHz then a tick
		# simulates 5ns of time. If the packet delay is 160ns (for a 40bit packet)
		# the packet delay should be 32 cycles.
		packet_delay: 24;
	}
	
	# Parameters for the tree of arbiters which merge the 7 incoming buffers of
	# packets into a single buffer that the router deals with.
	#
	# The arbiter tree looks like this (with the levels indicated below):
	#
	#        |\                                         ,------ KEY --------,
	#     S--| |_,--,_                                  |                   |
	#     E--| | '--' |    |\                           |             |\    |
	#        |/       `----| |_,--,_                    | Merger:  ---| |__ |
	#                 ,----| | '--' |                   |          ---| |   |
	#        |\       |    |/       |   |\              |             |/    |
	#    NE--| |_,--,_|             '---| |_,--,___     |                   |
	#     W--| | '--'               ,---| | '--'        | Buffer:  __,--,__ |
	#        |/            |\       |   |/              |            '--'   |
	#                 ,----| |_,--,_|                   '-------------------'
	#        |\       | ,--| | '--'
	#     W--| |_,--,_| |  |/
	#    SW--| | '--'   |
	#        |/         |
	#                   |
	#     L-------------'
	#
	#      `----v----'   `----v----'    `----v----'
	#         Lvl2           Lvl1           Root
	#
	# The period is the period of the merger (i.e. the number of ticks between
	# forwarding each incoming packet). The buffer_length is the length of the
	# buffer after each arbiter.
	arbiter_tree: {
		root: { period: 1; buffer_length: 4; }
		lvl1: { period: 2; buffer_length: 1; }
		lvl2: { period: 4; buffer_length: 1; }
	}
	
	# Each node contains a packet generator which at a regular period will
	# randomly drop a packet into the local input port of the node.
	packet_generator: {
		# How frequently to (possibly) drop a packet into the network
		period: 1;
		
		# How should packets be generated over time?
		temporal: {
			# The temporal distribution to use.
			#   "bernoulli" -- Flip a weighted coin each period and use that to decide
			#                  whether to try and send a packet. If the output is
			#                  blocked, give up immediately. The probability is set
			#                  using the bernoulli_prob parameter.
			#   "periodic" -- Try to send a packet at a regular interval. If the
			#                 output is blocked keep trying until it succeeds. The
			#                 next attempt will occur periodic_interval ticks after
			#                 the packet is sent. This means that over time the period
			#                 will shift. Note that in this mode the packets_offered
			#                 metric includes all repeated attempts at resending a
			#                 packet and so nolonger reflects the offered load.
			dist: "bernoulli";
			
			# The probability of dropping a packet into the network (used by the
			# "bernoulli" temporal distribution)
			bernoulli_prob: 0.0;
			
			# The interval between packet send attempts for the periodic_interval
			# (used by the "periodic" temporal distribution)
			periodic_interval: 16;
			
			# Should messages to the local core be generated?
			allow_local: False;
		}
		
		# The distribution of generated packet destinations.
		spatial: {
			# Spatial distributions
			#   "cyclic" -- Cycle through all nodes in the system starting with the
			#               current node
			#   "unform" -- Pick destinations at random using a uniform distribution.
			dist: "cyclic";
		}
		
		# How long should the buffer be that connects the packet generator to the
		# arbiter tree?
		buffer_length: 2;
	}
	
	# Each node contains a packet consumer which will accept packets at a given
	# interval and with a given probability.
	packet_consumer: {
		# How frequently should a packet (possibly) be accepted?
		period: 1;
		
		# How should packets be consumed over time?
		temporal: {
			# The temporal distribution to use.
			#   "bernoulli" -- Flip a weighted coin each period and use that to decide
			#                  whether to try and consume a packet. If the input is
			#                  empty, give up immediately. The probability is set
			#                  using the bernoulli_prob parameter.
			#   "periodic" -- Try to send a packet at a regular interval. If the
			#                 input is empty keep trying until a packet is consumed.
			#                 The next attempt will occur periodic_interval ticks
			#                 after the packet is received. This means that over time the
			#                 period will shift.
			dist: "bernoulli";
			
			# The probability of consuming a packet into the network (used by the
			# "bernoulli" temporal distribution)
			bernoulli_prob: 0.1;
			
			# The interval between packet send attempts for the periodic_interval
			# (used by the "periodic" temporal distribution)
			periodic_interval: 10;
		}
		
		# The router is attached to the packet consumer in the following fashion
		# ,--------,   ,------------------,   ,-------,   ,-------------------,   ,----------,
		# | Router |-->| Pre Delay Buffer |-->| Delay |-->| Post Delay Buffer |-->| Consumer |
		# '--------'   '------------------'   '-------'   '-------------------'   '----------'
		pre_delay_buffer_length: 2;
		delay: 1;
		post_delay_buffer_length: 2;
	}
}

# What results should be recorded?
measurements: {
	# The directory where all results will be dumped
	results_directory: "results/"
	
	# Count the global totals of each of these values
	global_counters: {
		# Count the number of packets offerred by the packet generators
		packets_offered: True;
		
		# Count the number of packets accepted from the packet generators
		packets_accepted: True;
		
		# Count the number of packets arriving at destinations
		packets_arrived: True;
		
		# Count the number of packets dropped in the system
		packets_dropped: True;
	}
	
	# Count each of these values for each individual node (e.g. for use in a
	# heatmap)
	per_node_counters: {
		# Count the number of packets offerred by the packet generators
		packets_offered: True;
		
		# Count the number of packets accepted from the packet generators
		packets_accepted: True;
		
		# Count the number of packets arriving at destinations
		packets_arrived: True;
		
		# Count the number of packets dropped in the system
		packets_dropped: True;
	}
	
	# Record information about the route taken by all delivered/dropped packets in
	# the system.
	packet_details: {
		# Record data for successfully delivered packets
		delivered_packets: True;
		
		# Record data for dropped packets
		dropped_packets: True;
	}
}

# Configuration parameters controlling the experement. An experemental run
# consists of a set of 'groups' which represent runs of the experiment with some
# independent variables changed. The simulation will be run multiple times for
# each group producing a set of 'samples' for each group.
experiment: {
	# Seed for the random number generator. Comment out to seed with system time
	seed: 100;
	
	# Warmup periods (in ticks)
	warmup_duration: {
		# Warmup period after the simulation has been reset (i.e. from cold)
		cold: 50000;
		
		# Warmup period after paramter changes when no reset is being performed
		hot: 10000;
	};
	
	
	# Should the simulation be reset (and re-warmed) between samples
	cold_sample: False;
	
	# Should the simulation be reset (and re-warmed) between groups (i.e. after a
	# parameter change)? If cold_sample is true, the simulation is reset
	# regardless of this value.
	#
	# Note that most parameters cannot be changed during the simulation, for
	# example sizes of buffers and pipelines, periods etc.. As a result,
	# cold_group may have to be set to True depending on the independent variables
	# chosen.
	cold_group: False;
	
	# The number of ticks in each sample
	sample_duration: 50000;
	
	# The number of samples for each group
	num_samples: 3;
	
	# A list of pairs of independent variables and a column heading for
	# the result files.
	independent_variables: ( ("model.packet_generator.temporal.bernoulli_prob", "inj_prob")
	                       );
	
	# The values of the above independent variables for each experimental group
	groups: ( (0.001)
	        , (0.005)
	        , (0.010)
	        , (0.015)
	        , (0.020)
	        );
}

